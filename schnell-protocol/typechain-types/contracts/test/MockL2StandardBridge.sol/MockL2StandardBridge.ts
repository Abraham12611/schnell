/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockL2StandardBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAllowance"
      | "lastAmount"
      | "lastExtraData"
      | "lastL2Token"
      | "lastMinGasLimit"
      | "lastTo"
      | "messenger"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WithdrawalCalled"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAllowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastL2Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMinGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastL2Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMinGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace WithdrawalCalledEvent {
  export type InputTuple = [
    l2Token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    minGasLimit: BigNumberish,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    l2Token: string,
    to: string,
    amount: bigint,
    minGasLimit: bigint,
    extraData: string
  ];
  export interface OutputObject {
    l2Token: string;
    to: string;
    amount: bigint;
    minGasLimit: bigint;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockL2StandardBridge extends BaseContract {
  connect(runner?: ContractRunner | null): MockL2StandardBridge;
  waitForDeployment(): Promise<this>;

  interface: MockL2StandardBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAllowance: TypedContractMethod<
    [token: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  lastAmount: TypedContractMethod<[], [bigint], "view">;

  lastExtraData: TypedContractMethod<[], [string], "view">;

  lastL2Token: TypedContractMethod<[], [string], "view">;

  lastMinGasLimit: TypedContractMethod<[], [bigint], "view">;

  lastTo: TypedContractMethod<[], [string], "view">;

  messenger: TypedContractMethod<[], [string], "view">;

  withdrawTo: TypedContractMethod<
    [
      _l2Token: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAllowance"
  ): TypedContractMethod<
    [token: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastExtraData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastL2Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastMinGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [
      _l2Token: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "WithdrawalCalled"
  ): TypedContractEvent<
    WithdrawalCalledEvent.InputTuple,
    WithdrawalCalledEvent.OutputTuple,
    WithdrawalCalledEvent.OutputObject
  >;

  filters: {
    "WithdrawalCalled(address,address,uint256,uint32,bytes)": TypedContractEvent<
      WithdrawalCalledEvent.InputTuple,
      WithdrawalCalledEvent.OutputTuple,
      WithdrawalCalledEvent.OutputObject
    >;
    WithdrawalCalled: TypedContractEvent<
      WithdrawalCalledEvent.InputTuple,
      WithdrawalCalledEvent.OutputTuple,
      WithdrawalCalledEvent.OutputObject
    >;
  };
}
