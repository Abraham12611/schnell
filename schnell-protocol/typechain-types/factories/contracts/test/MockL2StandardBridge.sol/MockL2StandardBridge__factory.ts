/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockL2StandardBridge,
  MockL2StandardBridgeInterface,
} from "../../../../contracts/test/MockL2StandardBridge.sol/MockL2StandardBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "messengerAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minGasLimit",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "WithdrawalCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "checkAllowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastExtraData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastL2Token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastMinGasLimit",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messenger",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_l2Token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_minGasLimit",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610f4b380380610f4b833981810160405281019061003291906100dc565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610109565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a98261007e565b9050919050565b6100b98161009e565b81146100c457600080fd5b50565b6000815190506100d6816100b0565b92915050565b6000602082840312156100f2576100f1610079565b5b6000610100848285016100c7565b91505092915050565b610e33806101186000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638b099b231161005b5780638b099b23146101055780638fb3b3ac14610135578063a3a7954814610153578063c14684471461016f57610088565b80633cb747bf1461008d5780637f894582146100ab578063829a86d9146100c957806383cbcf2e146100e7575b600080fd5b61009561018d565b6040516100a291906105df565b60405180910390f35b6100b36101b7565b6040516100c0919061068a565b60405180910390f35b6100d1610245565b6040516100de91906106c5565b60405180910390f35b6100ef61024b565b6040516100fc91906105df565b60405180910390f35b61011f600480360381019061011a9190610716565b61026f565b60405161012c91906106c5565b60405180910390f35b61013d6102f5565b60405161014a9190610775565b60405180910390f35b61016d6004803603810190610168919061084d565b61030b565b005b610177610578565b60405161018491906105df565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600480546101c490610916565b80601f01602080910402602001604051908101604052809291908181526020018280546101f090610916565b801561023d5780601f106102125761010080835404028352916020019161023d565b820191906000526020600020905b81548152906001019060200180831161022057829003601f168201915b505050505081565b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b81526004016102ac929190610947565b602060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed9190610985565b905092915050565b600360009054906101000a900463ffffffff1681565b838673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610347929190610947565b602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610985565b10156103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610a0f565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161040693929190610a2f565b6020604051808303816000875af1158015610425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104499190610a9e565b50856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360028190555082600360006101000a81548163ffffffff021916908363ffffffff160217905550818160049182610504929190610cb1565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fc29c91ba13a72150df2cba35f89bb3b098dc673a24eb6994cf8a62009b1496e6868686866040516105689493929190610dbd565b60405180910390a3505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c98261059e565b9050919050565b6105d9816105be565b82525050565b60006020820190506105f460008301846105d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610634578082015181840152602081019050610619565b60008484015250505050565b6000601f19601f8301169050919050565b600061065c826105fa565b6106668185610605565b9350610676818560208601610616565b61067f81610640565b840191505092915050565b600060208201905081810360008301526106a48184610651565b905092915050565b6000819050919050565b6106bf816106ac565b82525050565b60006020820190506106da60008301846106b6565b92915050565b600080fd5b600080fd5b6106f3816105be565b81146106fe57600080fd5b50565b600081359050610710816106ea565b92915050565b6000806040838503121561072d5761072c6106e0565b5b600061073b85828601610701565b925050602061074c85828601610701565b9150509250929050565b600063ffffffff82169050919050565b61076f81610756565b82525050565b600060208201905061078a6000830184610766565b92915050565b610799816106ac565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b6107c581610756565b81146107d057600080fd5b50565b6000813590506107e2816107bc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261080d5761080c6107e8565b5b8235905067ffffffffffffffff81111561082a576108296107ed565b5b602083019150836001820283011115610846576108456107f2565b5b9250929050565b60008060008060008060a0878903121561086a576108696106e0565b5b600061087889828a01610701565b965050602061088989828a01610701565b955050604061089a89828a016107a7565b94505060606108ab89828a016107d3565b935050608087013567ffffffffffffffff8111156108cc576108cb6106e5565b5b6108d889828a016107f7565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061092e57607f821691505b602082108103610941576109406108e7565b5b50919050565b600060408201905061095c60008301856105d0565b61096960208301846105d0565b9392505050565b60008151905061097f81610790565b92915050565b60006020828403121561099b5761099a6106e0565b5b60006109a984828501610970565b91505092915050565b600082825260208201905092915050565b7f4d6f636b4c324272696467653a204e6f7420617070726f766564000000000000600082015250565b60006109f9601a836109b2565b9150610a04826109c3565b602082019050919050565b60006020820190508181036000830152610a28816109ec565b9050919050565b6000606082019050610a4460008301866105d0565b610a5160208301856105d0565b610a5e60408301846106b6565b949350505050565b60008115159050919050565b610a7b81610a66565b8114610a8657600080fd5b50565b600081519050610a9881610a72565b92915050565b600060208284031215610ab457610ab36106e0565b5b6000610ac284828501610a89565b91505092915050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b2a565b610b718683610b2a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610bae610ba9610ba4846106ac565b610b89565b6106ac565b9050919050565b6000819050919050565b610bc883610b93565b610bdc610bd482610bb5565b848454610b37565b825550505050565b600090565b610bf1610be4565b610bfc818484610bbf565b505050565b5b81811015610c2057610c15600082610be9565b600181019050610c02565b5050565b601f821115610c6557610c3681610b05565b610c3f84610b1a565b81016020851015610c4e578190505b610c62610c5a85610b1a565b830182610c01565b50505b505050565b600082821c905092915050565b6000610c8860001984600802610c6a565b1980831691505092915050565b6000610ca18383610c77565b9150826002028217905092915050565b610cbb8383610acb565b67ffffffffffffffff811115610cd457610cd3610ad6565b5b610cde8254610916565b610ce9828285610c24565b6000601f831160018114610d185760008415610d06578287013590505b610d108582610c95565b865550610d78565b601f198416610d2686610b05565b60005b82811015610d4e57848901358255600182019150602085019450602081019050610d29565b86831015610d6b5784890135610d67601f891682610c77565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000610d9c8385610605565b9350610da9838584610d81565b610db283610640565b840190509392505050565b6000606082019050610dd260008301876106b6565b610ddf6020830186610766565b8181036040830152610df2818486610d90565b90509594505050505056fea2646970667358221220200d11b895f0ccd7ffc2a6a1d53005835ec4cfdaab1c6ebceddf382a19d1858464736f6c63430008140033";

type MockL2StandardBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockL2StandardBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockL2StandardBridge__factory extends ContractFactory {
  constructor(...args: MockL2StandardBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    messengerAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(messengerAddress, overrides || {});
  }
  override deploy(
    messengerAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(messengerAddress, overrides || {}) as Promise<
      MockL2StandardBridge & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockL2StandardBridge__factory {
    return super.connect(runner) as MockL2StandardBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockL2StandardBridgeInterface {
    return new Interface(_abi) as MockL2StandardBridgeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockL2StandardBridge {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockL2StandardBridge;
  }
}
